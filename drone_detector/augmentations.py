# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/09_augmentations.ipynb (unless otherwise specified).

__all__ = ['AlbumentationsTransform', 'SegmentationAlbumentationsTransform', 'segmentation_aug_tfms_fastai']

# Cell

from fastai.vision.all import *
import albumentations as A
from icevision.all import *

# Cell

class AlbumentationsTransform(RandTransform):
    "A transform handler for multiple `Albumentation` transforms"
    split_idx, order = None, 2

    def __init__(self, train_aug, valid_aug): store_attr()

    def before_call(self, b, split_idx): self.idx = split_idx

    def encodes(self, img:PILImage):
        if self.idx == 0:
            aug_img = self.train_aug(image=np.array(img))['image']
        else:
            aug_img = self.valid_aug(image=np.array(img))['image']
        return PILImage.create(aug_img)



# Cell

class SegmentationAlbumentationsTransform(ItemTransform):
    "A transform handler for `Albumentation` transforms for "
    split_idx = 0

    def __init__(self, aug): store_attr()

    def encodes(self, x):
        img, mask = x
        aug = self.aug(image=np.array(img), mask=np.array(mask))
        return PILImage.create(aug['image']), PILMask.create(aug['mask'])

# Cell

def segmentation_aug_tfms_fastai(size=160):
    "Utilize `tfms.A.aug_tfms` with fastai and SegmentationDataloaders"
    return SegmentationAlbumentationsTransform(A.Compose(tfms.A.aug_tfms(size=size, crop_fn=tfms.A.RandomCrop)))
