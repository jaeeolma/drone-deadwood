# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/41_engines.detectron2.training.ipynb (unless otherwise specified).

__all__ = ['Trainer']

# Cell
from ...imports import *
from ...utils import *

from .augmentations import *

import detectron2
from detectron2.engine import DefaultTrainer
from detectron2.evaluation import COCOEvaluator, DatasetEvaluators
from detectron2.data import build_detection_train_loader, DatasetMapper, MetadataCatalog
from detectron2.data import detection_utils as utils
from detectron2.utils.visualizer import Visualizer
from detectron2.data import transforms as T

from fastai.vision.data import get_grid

# Cell

class Trainer(DefaultTrainer):
    """
    Trainer class for training detectron2 models, using default augmentations
    """

    def __init__(self, cfg, data_loader):
        super().__init__(cfg)
        self.augs = augs

    @classmethod
    def build_evaluator(cls, cfg, dataset_name, output_folder=None):
        return DatasetEvaluators([COCOEvaluator(dataset_name, output_dir=output_folder)])

    @classmethod
    def build_train_loader(cls, cfg):
        if not cls.augs:
            augs = [T.ResizeShortestEdge(cfg.INPUT.MIN_SIZE_TRAIN,
                                     cfg.INPUT.MAX_SIZE_TRAIN,
                                     cfg.INPUT.MIN_SIZE_TRAIN_SAMPLING)]
        else: augs = cls.augs
        return build_detection_train_loader(cfg, mapper=DatasetMapper(cfg, is_train=True,
                                                                      augmentations=build_aug_transforms(cfg)))