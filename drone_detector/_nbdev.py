# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"rangeof": "00_utils.ipynb",
         "fix_multipolys": "00_utils.ipynb",
         "cone_v": "00_utils.ipynb",
         "cut_cone_v": "00_utils.ipynb",
         "adjusted_R2Score": "01_metrics.ipynb",
         "rrmse": "01_metrics.ipynb",
         "rrmse.__doc__": "01_metrics.ipynb",
         "bias": "01_metrics.ipynb",
         "bias.__doc__": "01_metrics.ipynb",
         "bias_pct": "01_metrics.ipynb",
         "bias_pct.__doc__": "01_metrics.ipynb",
         "label_ranking_average_precision_score": "01_metrics.ipynb",
         "label_ranking_loss": "01_metrics.ipynb",
         "one_error": "01_metrics.ipynb",
         "one_error.__doc__": "01_metrics.ipynb",
         "coverage_error": "01_metrics.ipynb",
         "JaccardCoeffMulti": "01_metrics.ipynb",
         "poly_IoU": "01_metrics.ipynb",
         "is_true_positive": "01_metrics.ipynb",
         "is_false_positive": "01_metrics.ipynb",
         "average_precision": "01_metrics.ipynb",
         "average_recall": "01_metrics.ipynb",
         "GisCOCOeval": "01_metrics.ipynb",
         "make_grid": "10_processing.tiling.ipynb",
         "Tiler": "10_processing.tiling.ipynb",
         "untile_raster": "10_processing.tiling.ipynb",
         "copy_sum": "10_processing.tiling.ipynb",
         "untile_vector": "10_processing.tiling.ipynb",
         "convert_poly_coords": "11_processing.coordinates.ipynb",
         "affine_transform_gdf": "11_processing.coordinates.ipynb",
         "gdf_to_px": "11_processing.coordinates.ipynb",
         "georegister_px_df": "11_processing.coordinates.ipynb",
         "resize_binary_mask": "12_processing.coco.ipynb",
         "close_contour": "12_processing.coco.ipynb",
         "binary_mask_to_polygon": "12_processing.coco.ipynb",
         "COCOProcessor": "12_processing.coco.ipynb",
         "icevision_mask_preds_to_coco_anns": "12_processing.coco.ipynb",
         "icevision_bbox_preds_to_coco_anns": "12_processing.coco.ipynb",
         "detectron2_bbox_preds_to_coco_anns": "12_processing.coco.ipynb",
         "detectron2_mask_preds_to_coco_anns": "12_processing.coco.ipynb",
         "non_max_suppression_fast": "13_processing.postprocessing.ipynb",
         "non_max_suppression_poly": "13_processing.postprocessing.ipynb",
         "do_nms": "13_processing.postprocessing.ipynb",
         "do_poly_nms": "13_processing.postprocessing.ipynb",
         "do_min_rot_rectangle_nms": "13_processing.postprocessing.ipynb",
         "normalize_bbox_coords": "13_processing.postprocessing.ipynb",
         "denormalize_bbox_coords": "13_processing.postprocessing.ipynb",
         "bb_intersection_over_union": "13_processing.postprocessing.ipynb",
         "prefilter_boxes": "13_processing.postprocessing.ipynb",
         "get_weighted_box": "13_processing.postprocessing.ipynb",
         "find_matching_box_quickly": "13_processing.postprocessing.ipynb",
         "weighted_boxes_fusion": "13_processing.postprocessing.ipynb",
         "do_wbf": "13_processing.postprocessing.ipynb",
         "do_wsf": "13_processing.postprocessing.ipynb",
         "fill_holes": "13_processing.postprocessing.ipynb",
         "dilate_erode": "13_processing.postprocessing.ipynb",
         "mask_rcnn_custom_anchors": "20_engines.icevision.models.ipynb",
         "faster_rcnn_custom_anchors": "20_engines.icevision.models.ipynb",
         "save_model_and_config": "20_engines.icevision.models.ipynb",
         "load_rcnn_from_config": "20_engines.icevision.models.ipynb",
         "AllDataParser": "21_engines.icevision.predict.ipynb",
         "icevision_tta": "21_engines.icevision.predict.ipynb",
         "predict_bboxes_icevision": "21_engines.icevision.predict.ipynb",
         "predict_instance_masks_icevision": "21_engines.icevision.predict.ipynb",
         "open_npy": "30_engines.fastai.data.ipynb",
         "open_geotiff": "30_engines.fastai.data.ipynb",
         "show_composite": "30_engines.fastai.data.ipynb",
         "show_single_channel": "30_engines.fastai.data.ipynb",
         "show_normalized_spectral_index": "30_engines.fastai.data.ipynb",
         "show_mean_spectra": "30_engines.fastai.data.ipynb",
         "norm": "30_engines.fastai.data.ipynb",
         "RegressionMask": "30_engines.fastai.data.ipynb",
         "RegressionMaskBlock": "30_engines.fastai.data.ipynb",
         "RegressionMask.create": "30_engines.fastai.data.ipynb",
         "MultiChannelTensorImage": "30_engines.fastai.data.ipynb",
         "MultiChannelTensorImage.create": "30_engines.fastai.data.ipynb",
         "MultiChannelImageBlock": "30_engines.fastai.data.ipynb",
         "using_attr": "30_engines.fastai.data.ipynb",
         "MultiChannelTensorImageTuple": "30_engines.fastai.data.ipynb",
         "MultiChannelTensorImageTuple.create": "30_engines.fastai.data.ipynb",
         "MultiChannelImageTupleBlock": "30_engines.fastai.data.ipynb",
         "get_image_timeseries": "30_engines.fastai.data.ipynb",
         "get_all_but_last": "30_engines.fastai.data.ipynb",
         "get_last": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders.from_csv": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders.from_shapefile": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders.from_name_func": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders.from_path_re": "30_engines.fastai.data.ipynb",
         "MultiChannelImageDataLoaders.from_name_re": "30_engines.fastai.data.ipynb",
         "TifSegmentationDataLoaders": "30_engines.fastai.data.ipynb",
         "label_with_matching_fname": "30_engines.fastai.data.ipynb",
         "label_from_different_folder": "30_engines.fastai.data.ipynb",
         "ScaleToFloatTensor": "30_engines.fastai.data.ipynb",
         "lovasz_grad": "31_engines.fastai.losses.ipynb",
         "iou_binary": "31_engines.fastai.losses.ipynb",
         "iou": "31_engines.fastai.losses.ipynb",
         "isnan": "31_engines.fastai.losses.ipynb",
         "mean": "31_engines.fastai.losses.ipynb",
         "lovasz_hinge": "31_engines.fastai.losses.ipynb",
         "lovasz_hinge_flat": "31_engines.fastai.losses.ipynb",
         "flatten_binary_scores": "31_engines.fastai.losses.ipynb",
         "lovasz_softmax": "31_engines.fastai.losses.ipynb",
         "lovasz_softmax_flat": "31_engines.fastai.losses.ipynb",
         "flatten_probas": "31_engines.fastai.losses.ipynb",
         "xloss": "31_engines.fastai.losses.ipynb",
         "LovaszHingeLossFlat": "31_engines.fastai.losses.ipynb",
         "LovaszHingeLoss": "31_engines.fastai.losses.ipynb",
         "LovaszSigmoidLossFlat": "31_engines.fastai.losses.ipynb",
         "LovaszSigmoidLoss": "31_engines.fastai.losses.ipynb",
         "LovaszSoftmaxLossFlat": "31_engines.fastai.losses.ipynb",
         "LovaszSoftmaxLoss": "31_engines.fastai.losses.ipynb",
         "FocalDice": "31_engines.fastai.losses.ipynb",
         "RegressionMask.affine_coord": "32_engines.fastai.augmentations.ipynb",
         "AlbumentationsTransform": "32_engines.fastai.augmentations.ipynb",
         "SegmentationAlbumentationsTransform": "32_engines.fastai.augmentations.ipynb",
         "segmentation_aug_tfms_fastai": "32_engines.fastai.augmentations.ipynb",
         "Pipeline.remove": "33_engines.fastai.predict.ipynb",
         "DataLoader.set_base_transforms": "33_engines.fastai.predict.ipynb",
         "predict_segmentation_fastai": "33_engines.fastai.predict.ipynb",
         "predict_bboxes_detectron2": "40_engines.detectron2.predict.ipynb",
         "predict_instance_masks_detectron2": "40_engines.detectron2.predict.ipynb"}

modules = ["utils.py",
           "metrics.py",
           "processing/tiling.py",
           "processing/coordinates.py",
           "processing/coco.py",
           "processing/postproc.py",
           "engines/icevision/models.py",
           "engines/icevision/predict.py",
           "engines/fastai/data.py",
           "engines/fastai/losses.py",
           "engines/fastai/augmentations.py",
           "engines/fastai/predict.py",
           "engines/detectron2/predict.py"]

doc_url = "https://jaeeolma.github.io/drone_detector/"

git_url = "https://github.com/jaeeolma/drone_detector/tree/master/"

def custom_doc_links(name): return None
