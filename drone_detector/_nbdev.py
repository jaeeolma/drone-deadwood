# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"rangeof": "00_utils.ipynb",
         "fix_multipolys": "00_utils.ipynb",
         "cone_v": "00_utils.ipynb",
         "cut_cone_v": "00_utils.ipynb",
         "make_grid": "01_tiling.ipynb",
         "Tiler": "01_tiling.ipynb",
         "untile_raster": "01_tiling.ipynb",
         "copy_sum": "01_tiling.ipynb",
         "untile_vector": "01_tiling.ipynb",
         "convert_poly_coords": "02_coordinates.ipynb",
         "affine_transform_gdf": "02_coordinates.ipynb",
         "gdf_to_px": "02_coordinates.ipynb",
         "georegister_px_df": "02_coordinates.ipynb",
         "resize_binary_mask": "03_coco.ipynb",
         "close_contour": "03_coco.ipynb",
         "binary_mask_to_polygon": "03_coco.ipynb",
         "COCOProcessor": "03_coco.ipynb",
         "icevision_mask_preds_to_coco_anns": "03_coco.ipynb",
         "icevision_bbox_preds_to_coco_anns": "03_coco.ipynb",
         "detectron2_bbox_preds_to_coco_anns": "03_coco.ipynb",
         "detectron2_mask_preds_to_coco_anns": "03_coco.ipynb",
         "non_max_suppression_fast": "04_postprocessing.ipynb",
         "non_max_suppression_poly": "04_postprocessing.ipynb",
         "do_nms": "04_postprocessing.ipynb",
         "do_poly_nms": "04_postprocessing.ipynb",
         "do_min_rot_rectangle_nms": "04_postprocessing.ipynb",
         "fill_holes": "04_postprocessing.ipynb",
         "dilate_erode": "04_postprocessing.ipynb",
         "plot_grid_preds_actuals_raws": "05_visualizations.ipynb",
         "show_raw_mask_pred": "05_visualizations.ipynb",
         "mask_rcnn_custom_anchors": "06_models.ipynb",
         "faster_rcnn_custom_anchors": "06_models.ipynb",
         "save_model_and_config": "06_models.ipynb",
         "load_rcnn_from_config": "06_models.ipynb",
         "AllDataParser": "08_predict.ipynb",
         "Pipeline.remove": "08_predict.ipynb",
         "DataLoader.set_base_transforms": "08_predict.ipynb",
         "icevision_tta": "08_predict.ipynb",
         "predict_bboxes": "08_predict.ipynb",
         "predict_instance_masks_detectron2": "08_predict.ipynb",
         "predict_instance_masks_icevision": "08_predict.ipynb",
         "predict_segmentation": "08_predict.ipynb",
         "RegressionMask.affine_coord": "09_augmentations.ipynb",
         "AlbumentationsTransform": "09_augmentations.ipynb",
         "SegmentationAlbumentationsTransform": "09_augmentations.ipynb",
         "segmentation_aug_tfms_fastai": "09_augmentations.ipynb",
         "adjusted_R2Score": "10_metrics.ipynb",
         "rrmse": "10_metrics.ipynb",
         "rrmse.__doc__": "10_metrics.ipynb",
         "bias": "10_metrics.ipynb",
         "bias.__doc__": "10_metrics.ipynb",
         "bias_pct": "10_metrics.ipynb",
         "bias_pct.__doc__": "10_metrics.ipynb",
         "label_ranking_average_precision_score": "10_metrics.ipynb",
         "label_ranking_loss": "10_metrics.ipynb",
         "one_error": "10_metrics.ipynb",
         "one_error.__doc__": "10_metrics.ipynb",
         "coverage_error": "10_metrics.ipynb",
         "JaccardCoeffMulti": "10_metrics.ipynb",
         "poly_IoU": "10_metrics.ipynb",
         "is_true_positive": "10_metrics.ipynb",
         "is_false_positive": "10_metrics.ipynb",
         "average_precision": "10_metrics.ipynb",
         "average_recall": "10_metrics.ipynb",
         "GisCOCOeval": "10_metrics.ipynb",
         "open_npy": "11_data.ipynb",
         "open_geotiff": "11_data.ipynb",
         "show_composite": "11_data.ipynb",
         "show_single_channel": "11_data.ipynb",
         "show_normalized_spectral_index": "11_data.ipynb",
         "show_mean_spectra": "11_data.ipynb",
         "norm": "11_data.ipynb",
         "RegressionMask": "11_data.ipynb",
         "RegressionMaskBlock": "11_data.ipynb",
         "RegressionMask.create": "11_data.ipynb",
         "MultiChannelTensorImage": "11_data.ipynb",
         "MultiChannelTensorImage.create": "11_data.ipynb",
         "MultiChannelImageBlock": "11_data.ipynb",
         "using_attr": "11_data.ipynb",
         "MultiChannelTensorImageTuple": "11_data.ipynb",
         "MultiChannelTensorImageTuple.create": "11_data.ipynb",
         "MultiChannelImageTupleBlock": "11_data.ipynb",
         "get_image_timeseries": "11_data.ipynb",
         "get_all_but_last": "11_data.ipynb",
         "get_last": "11_data.ipynb",
         "MultiChannelImageDataLoaders": "11_data.ipynb",
         "MultiChannelImageDataLoaders.from_csv": "11_data.ipynb",
         "MultiChannelImageDataLoaders.from_shapefile": "11_data.ipynb",
         "MultiChannelImageDataLoaders.from_name_func": "11_data.ipynb",
         "MultiChannelImageDataLoaders.from_path_re": "11_data.ipynb",
         "MultiChannelImageDataLoaders.from_name_re": "11_data.ipynb",
         "TifSegmentationDataLoaders": "11_data.ipynb",
         "label_with_matching_fname": "11_data.ipynb",
         "label_from_different_folder": "11_data.ipynb",
         "ScaleToFloatTensor": "11_data.ipynb",
         "lovasz_grad": "12_losses.ipynb",
         "iou_binary": "12_losses.ipynb",
         "iou": "12_losses.ipynb",
         "isnan": "12_losses.ipynb",
         "mean": "12_losses.ipynb",
         "lovasz_hinge": "12_losses.ipynb",
         "lovasz_hinge_flat": "12_losses.ipynb",
         "flatten_binary_scores": "12_losses.ipynb",
         "lovasz_softmax": "12_losses.ipynb",
         "lovasz_softmax_flat": "12_losses.ipynb",
         "flatten_probas": "12_losses.ipynb",
         "xloss": "12_losses.ipynb",
         "LovaszHingeLossFlat": "12_losses.ipynb",
         "LovaszHingeLoss": "12_losses.ipynb",
         "LovaszSigmoidLossFlat": "12_losses.ipynb",
         "LovaszSigmoidLoss": "12_losses.ipynb",
         "LovaszSoftmaxLossFlat": "12_losses.ipynb",
         "LovaszSoftmaxLoss": "12_losses.ipynb",
         "FocalDice": "12_losses.ipynb"}

modules = ["utils.py",
           "tiling.py",
           "coordinates.py",
           "coco.py",
           "postproc.py",
           "visualizations.py",
           "models.py",
           "predict.py",
           "augmentations.py",
           "metrics.py",
           "data.py",
           "losses.py"]

doc_url = "https://jaeeolma.github.io/drone_detector/"

git_url = "https://github.com/jaeeolma/drone_detector/tree/master/"

def custom_doc_links(name): return None
