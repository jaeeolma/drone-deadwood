# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_postprocessing.ipynb (unless otherwise specified).

__all__ = ['non_max_suppression_fast', 'non_max_suppression_poly', 'do_nms', 'do_poly_nms', 'do_min_rot_rectangle_nms',
           'fill_holes', 'dilate_erode']

# Cell
from .imports import *
from .utils import *


from skimage.morphology import erosion, dilation
from scipy.ndimage.morphology import binary_fill_holes

# Cell

# Malisiewicz et al.
def non_max_suppression_fast(boxes, scores, overlap_thresh:float, sort_criterion:str='score'):
    "Possibility to sort boxes by score (default) or area"

    # if there are no boxes, return an empty list
    if len(boxes) == 0:
        return []

    # if the bounding boxes integers, convert them to floats --
    # this is important since we'll be doing a bunch of divisions
    if boxes.dtype.kind == "i":
        boxes = boxes.astype("float")

    # sort prediction by scores,

    # initialize the list of picked indexes
    pick = []

    # grab the coordinates of the bounding boxes
    x1 = boxes[:,0]
    y1 = boxes[:,1]
    x2 = boxes[:,2]
    y2 = boxes[:,3]

    # compute the area of the bounding boxes and sort the bounding
    # boxes by the bottom-right y-coordinate of the bounding box
    area = (x2 - x1 + 1) * (y2 - y1 + 1)
    if sort_criterion == 'score':
        idxs = np.argsort(scores)
    elif sort_criterion == 'area':
        idxs = np.argsort(area)
    else:
        print('Unknown sort criteria, reverting to "score"')
        idxs = np.argsort(scores)

    # keep looping while some indexes still remain in the indexes
    # list
    while len(idxs) > 0:
        # grab the last index in the indexes list and add the
        # index value to the list of picked indexes
        last = len(idxs) - 1
        i = idxs[last]
        pick.append(i)

        # find the largest (x, y) coordinates for the start of
        # the bounding box and the smallest (x, y) coordinates
        # for the end of the bounding box
        xx1 = np.maximum(x1[i], x1[idxs[:last]])
        yy1 = np.maximum(y1[i], y1[idxs[:last]])
        xx2 = np.minimum(x2[i], x2[idxs[:last]])
        yy2 = np.minimum(y2[i], y2[idxs[:last]])

        # compute the width and height of the bounding box
        w = np.maximum(0, xx2 - xx1 + 1)
        h = np.maximum(0, yy2 - yy1 + 1)

        # compute the ratio of overlap
        overlap = (w * h) / area[idxs[:last]]

        # delete all indexes from the index list that have
        idxs = np.delete(idxs, np.concatenate(([last],
                         np.where(overlap > overlap_thresh)[0])))

    # return indices for selected bounding boxes
    return pick
    #return boxes[pick].astype("int")

# Cell

from .metrics import poly_IoU

def non_max_suppression_poly(geoms, scores, overlap_thresh:float, sort_criterion:str='score'):
    "Possibility to sort geoms by score (default) or area"

    # if there are no geoms, return an empty list
    if len(geoms) == 0:
        return []


    # sort prediction by scores,

    # initialize the list of picked indexes
    pick = []

    # compute the area of the bounding geoms and sort the bounding
    # geoms by the bottom-right y-coordinate of the bounding box
    area = np.array([geom.area for geom in geoms])
    if sort_criterion == 'score':
        idxs = np.argsort(scores)
    elif sort_criterion == 'area':
        idxs = np.argsort(area)
    else:
        print('Unknown sort criteria, reverting to "score"')
        idxs = np.argsort(scores)

    # keep looping while some indexes still remain in the indexes
    # list
    while len(idxs) > 0:
        # grab the last index in the indexes list and add the
        # index value to the list of picked indexes
        last = len(idxs) - 1
        i = idxs[last]
        pick.append(i)

        # compute the ratio of overlap with all other polygons
        overlap = np.array([poly_IoU(geoms[i], geoms[k]) for k in idxs[:last]])
        # delete all indexes from the index list that have
        # overlap larger than overlap_thresh
        idxs = np.delete(idxs, np.concatenate(([last],
                         np.where(overlap > overlap_thresh)[0])))

    # return indices for selected bounding geoms
    return pick

# Cell

def do_nms(gdf:gpd.GeoDataFrame, nms_thresh=0.7, crit='score'):
    gdf = gdf.copy()
    np_bboxes = np.array([b.bounds for b in gdf.geometry])
    scores = gdf.score.values
    idxs = non_max_suppression_fast(np_bboxes, scores, nms_thresh, crit)
    gdf = gdf.iloc[idxs]
    return gdf

def do_poly_nms(gdf:gpd.GeoDataFrame, nms_thresh=0.1, crit='score'):
    gdf = gdf.copy()
    scores = gdf.score.values
    idxs = non_max_suppression_poly(gdf.geometry.values, scores, nms_thresh, crit)
    gdf = gdf.iloc[idxs]
    return gdf

def do_min_rot_rectangle_nms(gdf:gpd.GeoDataFrame, nms_thresh=0.7, crit='score'):
    gdf = gdf.copy()
    scores = gdf.score.values
    boxes = np.array([g.minimum_rotated_rectangle for g in gdf.geometry.values])
    idxs = non_max_suppression_poly(boxes, scores, nms_thresh, crit)
    gdf = gdf.iloc[idxs]
    return gdf

# Cell

def fill_holes(preds:list) -> list:
    "Run `binary_fill_holes` to predicted binary masks"
    for i, p in tqdm(enumerate(preds)):
        for j in rangeof(p.pred.detection.label_ids):
            p_mask = p.pred.detection.mask_array.to_mask(p.height, p.width).data[j]
            p.pred.detection.mask_array.data[j] = binary_fill_holes(p_mask).astype(np.int8)
    return preds

def dilate_erode(preds:list) -> list:
    "Run dilation followed by erosion in order to smooth masks"
    for i, p in tqdm(enumerate(preds)):
        for j in rangeof(p.pred.detection.label_ids):
            p_mask = p.pred.detection.mask_array.to_mask(p.height, p.width).data[j]
            p.pred.detection.mask_array.data[j] = erosion(dilation(p_mask))
    return preds