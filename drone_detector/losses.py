# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/12_losses.ipynb (unless otherwise specified).

__all__ = ['LovaszHingeLossFlat', 'LovaszHingeLoss', 'LovaszSigmoidLossFlat', 'LovaszSigmoidLoss',
           'LovaszSoftmaxLossFlat', 'LovaszSoftmaxLoss']

# Cell
from .imports import *
from fastai.learner import Metric
from fastai.torch_core import *
from fastai.metrics import *
from fastai.losses import BaseLoss
from fastcore.meta import *
import sklearn.metrics as skm
import torch
import torch.nn.functional as F

# Cell

class LovaszHingeLossFlat(BaseLoss):
    "Same as `LovaszHingeLoss` but flattens input and target"
    y_int = True
    @use_kwargs_dict(keep=True, ignore=None)
    def __init__(self, *args, axis=-1, **kwargs): super().__init__(LovaszHingeLoss, *args, axis=axis, is_2d=False, **kwargs)
    def decodes(self, x): return x>0
    def activation(self, x): return x


class LovaszHingeLoss(Module):
    """
    Lovasz-Hinge loss from https://arxiv.org/abs/1705.08790, with per_image=True

    Todo

    Binary Lovasz hinge loss
      logits: [P] Variable, logits at each prediction (between -\infty and +\infty)
      labels: [P] Tensor, binary ground truth labels (0 or 1)
      ignore: label to ignore
    """

    def __init__(self, ignore=None):
        store_attr()

    def forward(self, outputs, targets):
        if self.ignore is not None:
            valid = (targets != ignore)
            outputs = outputs[valid]
            targets = targets[valid]
        if len(targets) == 0:
            # only void pixels, the gradiens should be 0
            return outputs.sum() * 0.
        signs = 2. * targets.float() - 1.
        errors = (1. - outputs * Variable(signs))
        errors_sorted, perm = torch.sort(errors, dim=0, descending=True)
        perm = perm.data
        gt_sorted = targets[perm]
        grad = lovasz_grad(gt_sorted)
        loss = torch.dot(F.relu(errors_sorted), Variable(grad))
        return loss

    def decodes(self, x): x>0
    def activation(self,x): return x

# Cell

class LovaszSigmoidLossFlat(BaseLoss):
    "Same as `LovaszSigmoidLoss` but flattens input and target"
    y_int = True
    @use_kwargs_dict(keep=True, ignore=None)
    def __init__(self, *args, axis=-1, **kwargs): super().__init__(LovaszSigmoidLoss, *args, axis=axis, is_2d=False, **kwargs)
    def decodes(self, x): return x>0
    def activation(self, x): return x

class LovaszSigmoidLoss(Module):
    """
    Lovasz-Sigmoid loss from https://arxiv.org/abs/1705.08790, with per_image=False

    Todo

      probas: [P, C] Variable, logits at each prediction (between -\infty and +\infty)
      labels: [P] Tensor, binary ground truth labels (0 or 1)
      ignore: label to ignore
    """

    def __init__(self, ignore=None):
        store_attr()

    def forward(self, outputs, targets):
        if self.ignore is not None:
            valid = (targets != ignore)
            outputs = outputs[valid]
            targets = targets[valid]
        if len(targets) == 0:
            # only void pixels, the gradiens should be 0
            return outputs.sum() * 0.
        outputs = torch.sigmoid(outputs)
        fg = (targets == 1).float() # foregroud pixels
        errors = (Variable(fg) - outputs).abs()
        errors_sorted, perm = torch.sort(errors, 0, descending=True)
        perm = perm.data
        fg_sorted = fg[perm]
        loss = torch.dot(errors_sorted, Variable(lovasz_grad(fg_sorted)))
        return loss

    def decodes(self, x): return x>0.5
    def activation(self, x): return torch.sigmoid(x)

# Cell

class LovaszSoftmaxLossFlat(BaseLoss):
    "Same as `LovaszSigmoidLoss` but flattens input and target"
    y_int = True
    @use_kwargs_dict(keep=True, classes='present', ignore=None)
    def __init__(self, *args, axis=1, **kwargs): super().__init__(LovaszSoftmaxLoss, *args, axis=axis, is_2d=True,
                                                                   flatten=True,**kwargs)
    def activation(self, out): return F.softmax(out, dim=self.axis)
    def decodes(self, out): return out.argmax(dim=self.axis)


class LovaszSoftmaxLoss(Module):
    """
    Lovasz-Sigmoid loss from https://arxiv.org/abs/1705.08790, with per_image=False

    """
    def __init__(self, classes='present', ignore=None):
        store_attr()

    def forward(self, outputs, targets):
        if outputs.numel() == 0:
            # only void pixels, the gradients should be 0
            return outputs * 0.
        outputs = F.softmax(outputs, dim=-1)
        C = outputs.size(1)
        losses = []
        class_to_sum = list(range(C)) if self.classes in ['all', 'present'] else self.classes
        for c in class_to_sum:
            fg = (targets == c).float() # foreground for class c
            if (self.classes == 'present' and fg.sum() == 0):
                continue
            if C == 1:
                if len(self.classes) > 1:
                    raise ValueError('Sigmoid output possible only with 1 class')
                class_pred = outputs[:, 0]
            else:
                class_pred = outputs[:, c]
            errors = (Variable(fg) - class_pred).abs()
            errors_sorted, perm = torch.sort(errors, 0, descending=True)
            perm = perm.data
            fg_sorted = fg[perm]
            losses.append(torch.dot(errors_sorted, Variable(lovasz_grad(fg_sorted))))
        return mean(losses)

    def activation(self, out): return F.softmax(out, dim=1)
    def decodes(self, out): return out.argmax(dim=1)